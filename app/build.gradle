//apply plugin: 'com.android.application'

//替换成
ext.mainApp = true //设置为true，表示此module为主app module，一直以application方式编译
apply from: rootProject.file('cc-settings.gradle')
//注意：最好放在build.gradle中代码的第一行
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    dexOptions {
        maxProcessCount 4
        javaMaxHeapSize "8g"
    }
    dataBinding {
        enabled true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':commonlib')

    //Notice:组件之间不要互相依赖，只在主app module依赖其它组件
    //使用addComponent(源码在cc-settings.gradle中)添加对组件的依赖可以达到如下效果:
    // 1. 组件切换library和application方式编译时只需在local.properties中进行设置，不需要修改app module中的依赖列表
    //      且运行主app module时会自动将【设置为以app方式编译的组件module】从依赖列表中排除
    // 2. 避免调试时切换library和application方式修改主app中的依赖项被误提交到代码仓库，导致jenkins集成打包时功能缺失
    // 3. 避免直接调用组件中的代码及资源
    //**注意开发模式中（即组件之间独立运行时跨app页面跳转时要把后台运行（自启动）权限开启）**
    //对组件库的依赖格式： addComponent dependencyName [, realDependency]
    //  dependencyName: 组件库的名称，推荐直接使用使用module的名称
    //  realDependency(可选): 组件库对应的实际依赖，可以是module依赖，也可以是maven依赖
    //    如果未配置realDependency，将自动依赖 project(":$dependencyName")
    //    realDependency可以为如下2种中的一种:
    //      module依赖 : project(':component_b') //如果module名称跟dependencyName相同，可省略(推荐)
    //      maven依赖  : 'com.billy.demo:demoB:1.1.0' //如果使用了maven私服，请使用此方式
    addComponent 'compontent_a'

    //单独运行demo时，只需在local.properties中添加demo=true即可
    // 此处无需修改，再次运行app:assembleXxx时将不会把demo打包进apk
    addComponent 'demo' // 这里参数2可以省略
}
